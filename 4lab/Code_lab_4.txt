import numpy as np
from time import process_time 
import os, psutil
import matplotlib.pyplot as plt
import copy
from numpy import random

t1 = 0
x = random.randint(1000000, size=(1000)) #creating list
#add primary sorting before Bucket sort
#x = sorted(x, key=None, reverse=True)
process = psutil.Process(os.getpid())
# ------------------------------------
#Bucket Sort Implementation in Python
#https://stackabuse.com/bucket-sort-in-python/
def in_sort(array, left=0, right=None):
    if right is None:
        right = len(array) - 1

    # Loop from the element indicated by
    # `left` until the element indicated by `right`
    for i in range(left + 1, right + 1):
        # This is the element we want to position in its
        # correct place
        key_item = array[i]

        # Initialize the variable that will be used to
        # find the correct position of the element referenced
        # by `key_item`
        j = i - 1

        # Run through the list of items (the left
        # portion of the array) and find the correct position
        # of the element referenced by `key_item`. Do this only
        # if the `key_item` is smaller than its adjacent values.
        while j >= left and array[j] > key_item:
            # Shift the value one position to the left
            # and reposition `j` to point to the next element
            # (from right to left)
            array[j + 1] = array[j]
            j -= 1

        # When you finish shifting the elements, position
        # the `key_item` in its correct location
        array[j + 1] = key_item

    return array

def insertion_sort(array):
    min_run = 32
    n = len(array)

    # Start by slicing and sorting small portions of the
    # input array. The size of these slices is defined by
    # your `min_run` size.
    for i in range(0, n, min_run):
        in_sort(array, i, min((i + min_run - 1), n - 1))

    # Now you can start merging the sorted slices.
    # Start from `min_run`, doubling the size on
    # each iteration until you surpass the length of
    # the array.
    size = min_run
    while size < n:
        # Determine the arrays that will
        # be merged together
        for start in range(0, n, size * 2):
            # Compute the `midpoint` (where the first array ends
            # and the second starts) and the `endpoint` (where
            # the second array ends)
            midpoint = start + size - 1
            end = min((start + size * 2 - 1), (n-1))

            # Merge the two subarrays.
            # The `left` array should go from `start` to
            # `midpoint + 1`, while the `right` array should
            # go from `midpoint + 1` to `end + 1`.
            merged_array = merge(
                left=array[start:midpoint + 1],
                right=array[midpoint + 1:end + 1])

            # Finally, put the merged array back into
            # your array
            array[start:start + len(merged_array)] = merged_array

        # Each iteration should double the size of your arrays
        size *= 2

        
def bucket_sort(input_list):
    # Find maximum value in the list and use length of the list to determine which value in the list goes into which bucket 
    max_value = max(input_list)
    size = max_value/len(input_list)

    # Create n empty buckets where n is equal to the length of the input list
    buckets_list= []
    for x in range(len(input_list)):
        buckets_list.append([]) 

    # Put list elements into different buckets based on the size
    for i in range(len(input_list)):
        j = int (input_list[i] / size)
        if j != len (input_list):
            buckets_list[j].append(input_list[i])
        else:
            buckets_list[len(input_list) - 1].append(input_list[i])

    # Sort elements within the buckets using Insertion Sort
    for z in range(len(input_list)):
        insertion_sort(buckets_list[z])
            
    # Concatenate buckets with sorted elements into a single list
    final_output = []
    for x in range(len (input_list)):
        final_output = final_output + buckets_list[x]
    return final_output


def main():
    input_list = x
    print('ORIGINAL LIST:')
    #print(input_list)
    t1_start = process_time()
    sorted_list = bucket_sort(input_list)
    #print('sorted LIST:')
    #print(sorted_list)
    t1_stop = process_time()
    print("Elapsed time during the whole program in seconds:", t1_stop-t1_start) 
    
main()

#""""
#PRACTICAL VERSION
fig, ax = plt.subplots()  # Create a figure and an axes.
ax.plot([50,100,500,1000,5000,10000,50000,100000], [0,0,0,0.016,0.09375,0.3281,11.09,121.7], label='Worst-case')  # Plot some data on the (implicit) axes.
ax.plot([50,100,500,1000,5000,10000,50000,100000], [0,0,0,0.016,0.09375,0.3125,8.4,90.0625], label='Average-case')  # etc.
ax.plot([50,100,500,1000,5000,10000,50000,100000], [0,0,0,0.016,0.07812,0.28125,8,79.8], label='Best-case')
ax.set_xlabel('Elements')
ax.set_ylabel('Time, sec')
ax.set_title("Practical version #1")
ax.legend()
#EXPERIMENTAL VERSION 
z = np.linspace(0, 2, 100)

fig, az = plt.subplots()  # Create a figure and an axes.
az.plot(z, z, label='Best and Average cases - linear')  # Plot some data on the (implicit) axes.
az.plot(z, z**2, label='Worst case - quadratic')  # etc.
az.set_xlabel('Elements')
az.set_ylabel('Time, sec')
az.set_title("Experimental Version")
az.legend()

#Memory comparison
k = np.linspace(0, 100000, 100)
fig, ak = plt.subplots()  # Create a figure and an axes.
ak.plot(k, k, label='Experimental memory usage')  # Plot some data on the (implicit) axes.
ak.plot([50,100,500,1000,5000,10000,50000,100000], [83.7,83.8,83.9,84.1,84.8,85,88.5,88.6], label='Practical memory usage')  # etc.
ak.set_xlabel('Elements')
ak.set_ylabel('Mmeory, Mbits')
ak.set_title("Memory comparison")
ak.legend()

#Improvement
fig, axa = plt.subplots()  # Create a figure and an axes.
axa.plot([50,100,500,1000,5000,10000,50000,100000], [0,0,0,0.016,0.09375,0.3281,11.09,121.7], label='Worst-case')  # Plot some data on the (implicit) axes.
axa.plot([50,100,500,1000,5000,10000,50000,100000], [0,0,0,0.016,0.07812,0.29687,10.31,101.33], label='Improvement #1 Bubble')  # etc.
axa.plot([50,100,500,1000,5000,10000,50000,100000], [0,0,0,0.016,0.0625,0.29687,10.2,100], label='Improvement #2 Timsort')
axa.set_xlabel('Elements')
axa.set_ylabel('Time, sec')
axa.set_title("Improvement methods")
axa.legend()



#"""""

#Best case - random range between 0 - 10 000;  + standart sorting before Bucket sort 
#Average case - random range between 0 - 10 000;
#Worst case - random range between 0 - 1000 000
#

#-------------------------------------
print("Memory Usage:", (process.memory_info().rss))  # in Mbits



""""

Improvement Wors-case #1
Bubble Sort
https://realpython.com/sorting-algorithms-python/
def insertion_sort(array):
    n = len(array)

    for i in range(n):
        # Create a flag that will allow the function to
        # terminate early if there's nothing left to sort
        already_sorted = True

        # Start looking at each item of the list one by one,
        # comparing it with its adjacent value. With each
        # iteration, the portion of the array that you look at
        # shrinks because the remaining items have already been
        # sorted.
        for j in range(n - i - 1):
            if array[j] > array[j + 1]:
                # If the item you're looking at is greater than its
                # adjacent value, then swap them
                array[j], array[j + 1] = array[j + 1], array[j]

                # Since you had to swap two elements,
                # set the `already_sorted` flag to `False` so the
                # algorithm doesn't finish prematurely
                already_sorted = False

        # If there were no swaps during the last iteration,
        # the array is already sorted, and you can terminate
        if already_sorted:
            break

Improvement Wors-case #2



Bubble sort - почерговий обхід по елементам та порівняння теперішнього елемента з попереднім за величиною. 
якщо current по value менший за попередній - міняються місцями 
Insertion sort - беремо початковий елемент та порівнюємо його зі всіма наступними

"""""
    
